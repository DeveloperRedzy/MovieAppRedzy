{"ast":null,"code":"import _asyncToGenerator from \"/Users/redzy/MovieAppRedzy/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { BehaviorSubject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./search.service\";\nexport class MoviesDataService {\n  constructor(http, searchService) {\n    this.http = http;\n    this.searchService = searchService;\n    this.dataSource = new BehaviorSubject([]);\n    this.data = this.dataSource.asObservable();\n    this.apiKey = '50c817a98f088ecfaaf8483ad5df9597';\n    this.moviesUrl = `https://api.themoviedb.org/3/movie/top_rated?api_key=${this.apiKey}&language=en-US&page=`;\n  }\n\n  changeData(res) {\n    this.dataSource.next(res);\n  }\n\n  getMovies() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      _this.searchService.updateIsSearching(true);\n\n      const firstPage = yield _this.http.get(_this.moviesUrl + '1').toPromise();\n      const secondPage = yield _this.http.get(_this.moviesUrl + '2').toPromise();\n\n      _this.changeData([...firstPage.results, ...secondPage.results.slice(10)]);\n\n      _this.searchService.updateIsSearching(false);\n    })();\n  }\n\n  searchMovies(query) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      if (query.length > 2) {\n        _this2.searchService.updateIsSearching(true);\n\n        const movies = yield _this2.http.get(`https://api.themoviedb.org/3/search/movie?api_key=${_this2.apiKey}&language=en-US&query=${query}&page=1&include_adult=false`).toPromise();\n\n        _this2.changeData([...movies.results]);\n\n        _this2.searchService.updateIsSearching(false);\n      } else if (!query.length) _this2.getMovies();\n    })();\n  }\n\n  getMovieDetails(id) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const data = yield _this3.http.get(`https://api.themoviedb.org/3/movie/${id}?api_key=${_this3.apiKey}&language=en-US`).toPromise();\n      return data;\n    })();\n  }\n\n}\n\nMoviesDataService.ɵfac = function MoviesDataService_Factory(t) {\n  return new (t || MoviesDataService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.SearchService));\n};\n\nMoviesDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MoviesDataService,\n  factory: MoviesDataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["/Users/redzy/MovieAppRedzy/src/app/movies-data.service.ts"],"names":[],"mappings":";AAEA,SAAS,eAAT,QAAgC,MAAhC;;;;AA+BA,OAAM,MAAO,iBAAP,CAAwB;AAC5B,EAAA,WAAA,CAAoB,IAApB,EAA8C,aAA9C,EAA0E;AAAtD,SAAA,IAAA,GAAA,IAAA;AAA0B,SAAA,aAAA,GAAA,aAAA;AACtC,SAAA,UAAA,GAAa,IAAI,eAAJ,CAA6B,EAA7B,CAAb;AACR,SAAA,IAAA,GAAO,KAAK,UAAL,CAAgB,YAAhB,EAAP;AACA,SAAA,MAAA,GAAS,kCAAT;AACA,SAAA,SAAA,GAAY,wDAAwD,KAAK,MAAM,uBAA/E;AAJ8E;;AAM9E,EAAA,UAAU,CAAC,GAAD,EAAa;AACrB,SAAK,UAAL,CAAgB,IAAhB,CAAqB,GAArB;AACD;;AAEK,EAAA,SAAS,GAAA;AAAA;;AAAA;AACb,MAAA,KAAI,CAAC,aAAL,CAAmB,iBAAnB,CAAqC,IAArC;;AACA,YAAM,SAAS,SAAiB,KAAI,CAAC,IAAL,CAC7B,GAD6B,CACjB,KAAI,CAAC,SAAL,GAAiB,GADA,EAE7B,SAF6B,EAAhC;AAGA,YAAM,UAAU,SAAiB,KAAI,CAAC,IAAL,CAC9B,GAD8B,CAClB,KAAI,CAAC,SAAL,GAAiB,GADC,EAE9B,SAF8B,EAAjC;;AAGA,MAAA,KAAI,CAAC,UAAL,CAAgB,CAAC,GAAG,SAAS,CAAC,OAAd,EAAuB,GAAG,UAAU,CAAC,OAAX,CAAmB,KAAnB,CAAyB,EAAzB,CAA1B,CAAhB;;AACA,MAAA,KAAI,CAAC,aAAL,CAAmB,iBAAnB,CAAqC,KAArC;AATa;AAUd;;AACK,EAAA,YAAY,CAAC,KAAD,EAAc;AAAA;;AAAA;AAC9B,UAAI,KAAK,CAAC,MAAN,GAAe,CAAnB,EAAsB;AACpB,QAAA,MAAI,CAAC,aAAL,CAAmB,iBAAnB,CAAqC,IAArC;;AACA,cAAM,MAAM,SAAiB,MAAI,CAAC,IAAL,CAC1B,GAD0B,CAEzB,qDAAqD,MAAI,CAAC,MAAM,yBAAyB,KAAK,6BAFrE,EAI1B,SAJ0B,EAA7B;;AAKA,QAAA,MAAI,CAAC,UAAL,CAAgB,CAAC,GAAG,MAAM,CAAC,OAAX,CAAhB;;AACA,QAAA,MAAI,CAAC,aAAL,CAAmB,iBAAnB,CAAqC,KAArC;AACD,OATD,MASO,IAAI,CAAC,KAAK,CAAC,MAAX,EAAmB,MAAI,CAAC,SAAL;AAVI;AAW/B;;AACK,EAAA,eAAe,CAAC,EAAD,EAAW;AAAA;;AAAA;AAC9B,YAAM,IAAI,SAAuB,MAAI,CAAC,IAAL,CAC9B,GAD8B,CAE7B,sCAAsC,EAAE,YAAY,MAAI,CAAC,MAAM,iBAFlC,EAI9B,SAJ8B,EAAjC;AAKA,aAAO,IAAP;AAN8B;AAO/B;;AAzC2B;;;mBAAjB,iB,EAAiB,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C,EAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,aAAA,C;AAAA,C;;;SAAjB,iB;AAAiB,EAAA,OAAA,EAAjB,iBAAiB,CAAA,I;AAAA,EAAA,UAAA,EAFhB","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject } from 'rxjs';\nimport { SearchService } from './search.service';\nimport { MovieDetails } from './movie-details/movie-details.component';\n\nexport interface Movie {\n  adult: boolean;\n  backdrop_path: string;\n  genre_ids: number[];\n  id: number;\n  original_language: string;\n  original_title: string;\n  overview: string;\n  popularity: number;\n  poster_path: string;\n  release_date: string;\n  title: string;\n  video: boolean;\n  vote_average: number;\n  vote_count: number;\n}\n\nexport interface Movies {\n  page: number;\n  results: Movie[];\n  total_pages: number;\n  total_results: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MoviesDataService {\n  constructor(private http: HttpClient, private searchService: SearchService) {}\n  private dataSource = new BehaviorSubject<Movie[]>([]);\n  data = this.dataSource.asObservable();\n  apiKey = '50c817a98f088ecfaaf8483ad5df9597';\n  moviesUrl = `https://api.themoviedb.org/3/movie/top_rated?api_key=${this.apiKey}&language=en-US&page=`;\n\n  changeData(res: Movie[]) {\n    this.dataSource.next(res);\n  }\n\n  async getMovies() {\n    this.searchService.updateIsSearching(true);\n    const firstPage: Movies = await this.http\n      .get<Movies>(this.moviesUrl + '1')\n      .toPromise();\n    const secondPage: Movies = await this.http\n      .get<Movies>(this.moviesUrl + '2')\n      .toPromise();\n    this.changeData([...firstPage.results, ...secondPage.results.slice(10)]);\n    this.searchService.updateIsSearching(false);\n  }\n  async searchMovies(query: string) {\n    if (query.length > 2) {\n      this.searchService.updateIsSearching(true);\n      const movies: Movies = await this.http\n        .get<Movies>(\n          `https://api.themoviedb.org/3/search/movie?api_key=${this.apiKey}&language=en-US&query=${query}&page=1&include_adult=false`\n        )\n        .toPromise();\n      this.changeData([...movies.results]);\n      this.searchService.updateIsSearching(false);\n    } else if (!query.length) this.getMovies();\n  }\n  async getMovieDetails(id: number) {\n    const data: MovieDetails = await this.http\n      .get<MovieDetails>(\n        `https://api.themoviedb.org/3/movie/${id}?api_key=${this.apiKey}&language=en-US`\n      )\n      .toPromise();\n    return data;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}